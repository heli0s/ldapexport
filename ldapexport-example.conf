%CFG = (
    ###
    ### This is a sample configuration file for ldapexport.pl.
    ###


    ###-------------------------------------------------------------------------
    ### General Settings
    ###-------------------------------------------------------------------------

    ### LOG file options.
    'log' => {
        ## Log file and path.
        'file' => './ldapexport.log',

        ## Log Levels: OFF, ERROR, WARN, INFO, DEBUG
        'level' => 'DEBUG',
    },

    ### Key used for encryption.  If set, password encryption is used.
    ### To disable encryption, comment out configuration option.
    'key' => {
        'file' => './key.txt',
    },

    ###-------------------------------------------------------------------------
    ### INPUT source settings.
    ###
    ### Here you must define input sources that will be used by output maps.
    ### These sources can either be of type 'ldap' for LDAP servers, or of type
    ### 'csv' for flat csv files.  You can have more than one input source.
    ###-------------------------------------------------------------------------
    'ldapServers' => {

        ### Example CSV input source.
        ### The name of this input source will be used later in output mappings
        ### and optionally filters, to extract data.  This input section defines
        ### how the to read that file.
        'ExampleCSVFile' => {

            ### Type can be one of either csv or ldap.
            'type'          => 'csv',

            ### The ldapexport.pl script leverates the perl module Text::CSV_XS.
            ### Here, you may pass options specific to that module in order to change
            ### the read behavior to work with your file.  These default settings
            ### should work for most properly formatted CSV files, but you may need
            ### to experiment with what works best for your file.
            'csv_opts'      => { sep_char => ",", empty_is_undef => 1, allow_whitespace => 1, binary => 1 },

            ### If your CSV file has a header row at the top, set this to true.
            ### This allows you to reference header names the same way you would
            ### reference LDAP attributes for LDAP server connections.  If set to
            ### false, you can only reference columns using the column number,
            ### starting with '0'.
            'header'        => true,

            ### This is the CSV file this source will read from.
            ### Note, you may optionally specify a glob (*).  If multiple files
            ### match this wildcard, the list will be sorted, and the last file
            ### in the list will be loaded.  This can allow you to use a datestamp
            ### such as YYYYMMDD, and keep a backup of old CSV files.
            'file'          => 'Example-file-*.csv',

            ### This utility basically treats a CSV file like an LDAP database.
            ### All entries in LDAP have a primary attribute (like a primary key)
            ### used to find the object.  This utility treats each row in the CSV
            ### file as an object, so in order to load one object, a primary key
            ### must be defined for that row.  Here you would specfy the column
            ### name that will be that primary key.
            'key'           => 'UUID',

            ### You may optionally exclude certain primary key values when loading
            ### the file, essentially excluding that object at load time.  This
            ### may allow you to optimize load time for improved performance.
            'excludeKeyValues'   => (),
        },
		
        ### Example LDAP input source.
        ### The name of this input source will be used later in output mappings
        ### and optionally filters, to extract data.  This input section defines
        ### connection parameters this server.
        'ExampleLDAPServer' => {

            ### Type can be one of either csv or ldap.
            'type'          => 'ldap',

            ### LDAP host server.  This is the fully qualified name or ip of the
            ### LDAP server this source will connect to.  Only one server is 
            ### currently allowed.
            'host'		=> 'ldaps.example.com',

            ### LDAP Port.
            'port'		=> '636',

            ### Secure connection (true/false)
            'secure'	=> true,

            ### User to bind with.  This must be the fully qualified LDAP user DN.
            'binduser'	=> 'cn=svc-ldexport,ou=OTHER,dc=example,dc=com',

            ### Password to bind with.
            ### If you have enabled the option to use an encryption key file, this
            ### password must be the encrypted value.  
            'bindpass'      => 'xxxxxxxxxxxxxxxxxxx',

            ### Some directories will only allow reading 1000 entries at once
            ### such as AD.  If this is the case, set this to some page value.  This
            ### Setting a value greater than zero (ie. 1000) will enable paging.  The 
            ### value will be the number of results to return per page.  Paging can
            ### also lessen the performance impact on some LDAP servers, and reduce
            ### local memory requirements.  You may also enable paging for each
            ### specific output map.
            ### NOTE: Not all LDAP servers support paging.
            'page'		=> 0,

        },

        'ExampleCSVFile2' => {
            'type'          => 'ldap',
            'host'          => 'ldaps2.example.com',
            'port'          => '636',
            'secure'        => true,
            'binduser'      => 'cn=svc-ldexport,ou=other,dc=example,dc=com',
            'bindpass'      => 'zzzzzzzzzzzzzzzzzzzzzzzzzz',
            'page'		=> 0,
        },

    },


    ###-------------------------------------------------------------------------
    ### OUTPUT map settings.
    ###
    ### The whole idea of this utility is to read objects from a database, such
    ### as LDAP, iterate over those objects, apply any data transformation/filters
    ### as necessary, and output particular attributes to either the screen or a
    ### flat file.  The output process allows you to map source attributes to 
    ### output attributes, which we call an output map.
    ###
    ### Each output map must have a primary input source to itterate over, which
    ### can be either and LDAP or CSV input source.  Secondary calls to other 
    ### input sources can be called through the use of filters, to effectively
    ### merge data from multiple input sources.
    ###
    ### Available Filters:
    ###     LDAP:
    ###         Makes a secondary LDAP query for the attribute being mapped.
    ###         You can use this to merge object data from two different trees.
    ###             Usage:
    ###                     'LDAP' => {
    ###                         'server' => '<input source name>',
    ###                         'dn' => '<search DN>',
    ###                         'searchKey' => '<target attribute key>',
    ###                         'matchKey' => '<source attribute key>',
    ###                         'attribute' => '<attribute to return>'
    ###                     },
    ###
    ###             The LDAP filter searches a second input source from the DN.
    ###             The searchKey is the primary object attribute in that remote
    ###             container, and the matchKey is an attribute from the primary
    ###             input source that you want to map to that searchKey.  For
    ###             example, if you have two LDAP trees, and both have the same
    ###             uniqueID value, you would use that same attribute for both.
    ###
    ###     CSV:
    ###         Make a sub-query in a CSV file to extract a single attribute.
    ###         Useful for merging data from both LDAP and a CSV file.
    ###             Usage:
    ###                     'CSV' => {
    ###                         'source' => '<input source name>',
    ###                         'searchKey' => '<target attribute key>',
    ###                         'matchKey' => '<source attribute key>',
    ###                         'attribute' => '<attribute/column header to return>'
    ###                     },
    ###
    ###             This filter is almost identical to the LDAP filter, except
    ###             it act on a CSV input file.
    ###     REGEX:
    ###         Allows you to apply powerful PERL regular expressions to the
    ###         returned values of an attribute.
    ###
    ###     STATIC:
    ###         Allows you to set static values for a map.  Useful when your
    ###         input source does not have the data you need.
    ###
    ###     AGE:
    ###         Calulates an age based on a date of birth value.
    ###
    ###     CHAIN: 
    ###         This powerful filter allows you to either chain multiple values
    ###         or multple filters.  The chain filter can be configured to return
    ###         either a single value, or multiple values.  The multi-value return
    ###         would be similar to returning a multi-valued LDAP attribute.
    ###         
    ###     JOIN:
    ###         Join is similar to CHAIN, except that it is design to join a
    ###         a multi-valued attribute into a single valued attribute, separated
    ###         by a specified string.
    
    ###-------------------------------------------------------------------------
    'OutputMaps' => {

        ### Example output map using a primary LDAP datasource.
        'ExampleOutputMap' => {

            ### Enable this output map, true or false.
            ### By default, when you run ldapexport.pl by itself, it will look for
            ### and load the default ldapexport.conf configuration file and look
            ### for output maps that are marked enabled, and execute those.  You
            ### may optionally leave all output maps disabled, and enable specific
            ### ones at runtime from the command line option [-e];
            'enabled'	=> 'false',

            ### You must specify the type of output for this map.
            ### 'csv' will store the output to a CSV file.
            ### 'screen' will print the output to your screen.
            'type'		=> 'csv',

            ### Here you specify the name of the primary input source you want 
            ### to use.  This is the name of the input source you defined above.
            'sourceLdap'	=> 'ExampleLDAPServer',

            ### OPTIONAL.  Here we can override the page setting of the input
            ### source you are using.
            'page'		=> 1000,

            ### If you specified output type 'cvs', you must specify a target
            ### file name.
            'file'		=> './ExampleOutputCSVFile.csv',

            ### OPTIONAL.  If you specify this timestamp, the suffix will
            ### be added onto the end of your output filename, just before the
            ### file extension.  This timestamp accepts common GNU time formatting
            ### options.  See the Time::HiRes perl module documentation for options.
            'timestamp'	=> '_%Y%m%d%H%M%S',

            ### OPTIONAL.  If you are adding a timestamp to the end of your file,
            ### you have the option of specifying how many files you want to keep.
            ### This will automatically purge older files that exceed this number.
            'keep'		=> 10,

            ### DN to the LDAP container holding the objects you wish to retrieve.
            ### Currently, all searches are perfomed only with a subtree search.
            'dn'		=> 'ou=People,dc=example,dc=com',

            ### Primary LDAP record identifier for the objects you wish to retrieve.
            'key'		=> 'uid',

            ### LDAP search filter.
            'searchfiler'       => '(&(objectClass=user)(Login Disabled=false))'

            ### Attribute Map.
            ### This is the guts of the utility.  For each object retrieved by the
            ### search filter, we map a name to the value of each of that object's
            ### returned attributes.  The returned values can further be processed
            ### by custom filters.  For a full list of filters and usage, see the
            ### end of this example file.
            ###
            ### These configuration maps leverage nested PERL hashes and arrays.
            ### Take careful note of the examples to ensure propper formatting.
            'attributeMap'	=> [

                ### The following are examples of one to one mapping.  These map
                ### column names in our output CSV tile to attribute names from
                ### our LDAP object.
                { 'User ID'			=>	'uid' },
                { 'User First Name'		=>	'givenName' },
                { 'User Last Name'		=>	'surname' },
                { 'User Full Name'		=>	{
                                                            'JOIN' => {
                                                                'separator' => ' ',
                                                                'list' => {
                                                                    'CHAIN' => {
                                                                        'list' => [
                                                                            'givenName',
                                                                            'surname',
                                                                        ],
                                                                        'return' => 'multi',
                                                                    },
                                                                },
                                                            },
                                                        },
                { 'User Phone'			=>	'telephoneNumber' },
                { 'User Email Address'		=>	'mail' },
                { 'User Title'			=>	'title' },
                { 'User Employee ID'		=>	'emplid' },
                { 'Department'			=>	'departmentName' },
                { 'Department ID'		=>	'departmentNumber' },
                { 'Facility'			=>	'roomNumber' },
                { 'User Last Password Update'	=>	'pwdChangedTime' },
                { 'User Windows Expiration'	=>	'passwordExpirationTime' },

                ### The followin show how to use various filters.

                ### This mapping uses two filters, CHAIN and REGEX.  The CHAIN filter
                ### allows you to chain a 'list' of values from more that one
                ### attribute, or a 'list' of filters.  the results of a list
                { 'User Manager'		=>	{
                                                            'CHAIN' =>  {
                                                                'list'  =>  [
                                                                    {
                                                                        'REGEX' => {
                                                                            'expression' => 's/^uid=(.+?),.*/$1/g',
                                                                            'attribute' => 'primarymanager'
                                                                        },
                                                                    },
                                                                    {
                                                                        'REGEX' => {
                                                                            'expression' => 's/^uid=(.+?),.*/$1/g',
                                                                            'attribute' => 'secondarymanager'
                                                                        },
                                                                    },
                                                                ],
                                                                'return'    =>  'multi'
                                                            },
                                                        },
                },
                { 'User Company Name'		=>	{ 'STATIC'    =>  'Some Company' } },

                { 'User Gender'                 =>      {
                                                            'REGEX' =>  {
                                                                'expression'    =>  's/(\w)/\U$1/',
                                                                'attribute'     =>  'gender',
                                                            },
                                                        },
                },
                { 'User Birth Date'		=>	{
                                                            'CHAIN' =>  {
                                                                'list' => [
                                                                    {
                                                                        'LDAP' => {
                                                                            'server' => 'ExampleCSVFile2',
                                                                            'dn' => 'ou=otherpeople,dc=example,dc=com',
                                                                            'searchKey' => 'uid',
                                                                            'matchKey' => 'uuid',
                                                                            'attribute' => 'DOB'
                                                                        },
                                                                    },
                                                                    {
                                                                        'REGEX' => {
                                                                            'expression' => 's/(\d\d)\/(\d\d)\/(\d\d\d\d)/$3$1$2/',
                                                                            'attribute' => 'ExampleCSVFile2_DOB'
                                                                        },
                                                                    },
                                                                ],
                                                            },
                                                        },
                },
                { 'User Address Line 1'		=>	{
                                                            'CSV' => {
                                                                'source' => 'ExampleCSVFile',
                                                                'searchKey' => 'UUID',
                                                                'matchKey' => 'uuid',
                                                                'attribute' => 'ADDRESS LINE 1'
                                                            },                                                                
                                                        },
                },
                { 'User Address Line 2'		=>	{
                                                            'CSV' => {
                                                                'source' => 'ExampleCSVFile',
                                                                'searchKey' => 'UUID',
                                                                'matchKey' => 'uuid',
                                                                'attribute' => 'ADDRESS LINE 2'
                                                            },                                                                
                                                        },
                },
                { 'User City'			=>	{
                                                            'CSV' => {
                                                                'source' => 'ExampleCSVFile',
                                                                'searchKey' => 'UUID',
                                                                'matchKey' => 'uuid',
                                                                'attribute' => 'CITY'
                                                            },                                                                
                                                        },
                },
                { 'User State'			=>	{
                                                            'CSV' => {
                                                                'source' => 'ExampleCSVFile',
                                                                'searchKey' => 'UUID',
                                                                'matchKey' => 'uuid',
                                                                'attribute' => 'STATE'
                                                            },                                                                
                                                        },                
                },
                { 'User Postal Code'		=>	{
                                                            'CSV' => {
                                                                'source' => 'ExampleCSVFile',
                                                                'searchKey' => 'UUID',
                                                                'matchKey' => 'uuid',
                                                                'attribute' => 'POSTAL'
                                                            },                                                                
                                                        },  
                },
                { 'User County Code'		=>	{
                                                            'CSV' => {
                                                                'source' => 'ExampleCSVFile',
                                                                'searchKey' => 'UUID',
                                                                'matchKey' => 'uuid',
                                                                'attribute' => 'CTRY'
                                                            },                                                                
                                                        }, 
                },
                { 'User Marital Status'		=>	'' },

            ],
        },
    },	
);
